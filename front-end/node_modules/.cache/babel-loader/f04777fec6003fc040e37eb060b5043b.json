{"ast":null,"code":"\"use strict\";\n\nvar crypto = require('crypto');\n\nvar Charset = require('./charset.js');\n\nfunction safeRandomBytes(length) {\n  while (true) {\n    try {\n      return crypto.randomBytes(length);\n    } catch (e) {\n      continue;\n    }\n  }\n}\n\nexports.generate = function (options) {\n  var charset = new Charset();\n  var length,\n      chars,\n      capitalization,\n      string = ''; // Handle options\n\n  if (typeof options === 'object') {\n    length = options.length || 32;\n\n    if (options.charset) {\n      charset.setType(options.charset);\n    } else {\n      charset.setType('alphanumeric');\n    }\n\n    if (options.capitalization) {\n      charset.setcapitalization(options.capitalization);\n    }\n\n    if (options.readable) {\n      charset.removeUnreadable();\n    }\n\n    charset.removeDuplicates();\n  } else if (typeof options === 'number') {\n    length = options;\n    charset.setType('alphanumeric');\n  } else {\n    length = 32;\n    charset.setType('alphanumeric');\n  } // Generate the string\n\n\n  var charsLen = charset.chars.length;\n  var maxByte = 256 - 256 % charsLen;\n\n  while (length > 0) {\n    var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));\n\n    for (var i = 0; i < buf.length && length > 0; i++) {\n      var randomByte = buf.readUInt8(i);\n\n      if (randomByte < maxByte) {\n        string += charset.chars.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n  }\n\n  return string;\n};","map":{"version":3,"sources":["D:/Code/College/ASDL/ASDL/front-end/node_modules/randomstring/lib/randomstring.js"],"names":["crypto","require","Charset","safeRandomBytes","length","randomBytes","e","exports","generate","options","charset","chars","capitalization","string","setType","setcapitalization","readable","removeUnreadable","removeDuplicates","charsLen","maxByte","buf","Math","ceil","i","randomByte","readUInt8","charAt"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAIC,OAAO,CAAC,QAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AAEA,SAASE,eAAT,CAAyBC,MAAzB,EAAiC;AAC/B,SAAO,IAAP,EAAa;AACX,QAAI;AACF,aAAOJ,MAAM,CAACK,WAAP,CAAmBD,MAAnB,CAAP;AACD,KAFD,CAEE,OAAME,CAAN,EAAS;AACT;AACD;AACF;AACF;;AAEDC,OAAO,CAACC,QAAR,GAAmB,UAASC,OAAT,EAAkB;AAEnC,MAAIC,OAAO,GAAG,IAAIR,OAAJ,EAAd;AAEA,MAAIE,MAAJ;AAAA,MAAYO,KAAZ;AAAA,MAAmBC,cAAnB;AAAA,MAAmCC,MAAM,GAAG,EAA5C,CAJmC,CAMnC;;AACA,MAAI,OAAOJ,OAAP,KAAmB,QAAvB,EAAiC;AAC/BL,IAAAA,MAAM,GAAGK,OAAO,CAACL,MAAR,IAAkB,EAA3B;;AAEA,QAAIK,OAAO,CAACC,OAAZ,EAAqB;AACnBA,MAAAA,OAAO,CAACI,OAAR,CAAgBL,OAAO,CAACC,OAAxB;AACD,KAFD,MAGK;AACHA,MAAAA,OAAO,CAACI,OAAR,CAAgB,cAAhB;AACD;;AAED,QAAIL,OAAO,CAACG,cAAZ,EAA4B;AAC1BF,MAAAA,OAAO,CAACK,iBAAR,CAA0BN,OAAO,CAACG,cAAlC;AACD;;AAED,QAAIH,OAAO,CAACO,QAAZ,EAAsB;AACpBN,MAAAA,OAAO,CAACO,gBAAR;AACD;;AAEDP,IAAAA,OAAO,CAACQ,gBAAR;AACD,GAnBD,MAoBK,IAAI,OAAOT,OAAP,KAAmB,QAAvB,EAAiC;AACpCL,IAAAA,MAAM,GAAGK,OAAT;AACAC,IAAAA,OAAO,CAACI,OAAR,CAAgB,cAAhB;AACD,GAHI,MAIA;AACHV,IAAAA,MAAM,GAAG,EAAT;AACAM,IAAAA,OAAO,CAACI,OAAR,CAAgB,cAAhB;AACD,GAlCkC,CAoCnC;;;AACA,MAAIK,QAAQ,GAAGT,OAAO,CAACC,KAAR,CAAcP,MAA7B;AACA,MAAIgB,OAAO,GAAG,MAAO,MAAMD,QAA3B;;AACA,SAAOf,MAAM,GAAG,CAAhB,EAAmB;AACjB,QAAIiB,GAAG,GAAGlB,eAAe,CAACmB,IAAI,CAACC,IAAL,CAAUnB,MAAM,GAAG,GAAT,GAAegB,OAAzB,CAAD,CAAzB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACjB,MAAR,IAAkBA,MAAM,GAAG,CAA3C,EAA8CoB,CAAC,EAA/C,EAAmD;AACjD,UAAIC,UAAU,GAAGJ,GAAG,CAACK,SAAJ,CAAcF,CAAd,CAAjB;;AACA,UAAIC,UAAU,GAAGL,OAAjB,EAA0B;AACxBP,QAAAA,MAAM,IAAIH,OAAO,CAACC,KAAR,CAAcgB,MAAd,CAAqBF,UAAU,GAAGN,QAAlC,CAAV;AACAf,QAAAA,MAAM;AACP;AACF;AACF;;AAED,SAAOS,MAAP;AACD,CAnDD","sourcesContent":["\"use strict\";\r\n\r\nvar crypto  = require('crypto');\r\nvar Charset = require('./charset.js');\r\n\r\nfunction safeRandomBytes(length) {\r\n  while (true) {\r\n    try {\r\n      return crypto.randomBytes(length);\r\n    } catch(e) {\r\n      continue;\r\n    }\r\n  }\r\n}\r\n\r\nexports.generate = function(options) {\r\n  \r\n  var charset = new Charset();\r\n  \r\n  var length, chars, capitalization, string = '';\r\n  \r\n  // Handle options\r\n  if (typeof options === 'object') {\r\n    length = options.length || 32;\r\n    \r\n    if (options.charset) {\r\n      charset.setType(options.charset);\r\n    }\r\n    else {\r\n      charset.setType('alphanumeric');\r\n    }\r\n    \r\n    if (options.capitalization) {\r\n      charset.setcapitalization(options.capitalization);\r\n    }\r\n    \r\n    if (options.readable) {\r\n      charset.removeUnreadable();\r\n    }\r\n    \r\n    charset.removeDuplicates();\r\n  }\r\n  else if (typeof options === 'number') {\r\n    length = options;\r\n    charset.setType('alphanumeric');\r\n  }\r\n  else {\r\n    length = 32;\r\n    charset.setType('alphanumeric');\r\n  }\r\n  \r\n  // Generate the string\r\n  var charsLen = charset.chars.length;\r\n  var maxByte = 256 - (256 % charsLen);\r\n  while (length > 0) {\r\n    var buf = safeRandomBytes(Math.ceil(length * 256 / maxByte));\r\n    for (var i = 0; i < buf.length && length > 0; i++) {\r\n      var randomByte = buf.readUInt8(i);\r\n      if (randomByte < maxByte) {\r\n        string += charset.chars.charAt(randomByte % charsLen);\r\n        length--;\r\n      }\r\n    }\r\n  }\r\n\r\n  return string;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}